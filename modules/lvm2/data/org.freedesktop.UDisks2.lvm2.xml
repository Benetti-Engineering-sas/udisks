<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

<!--
 Copyright (C) 2013 Marius Vollmer <marius.vollmer@gmail.com>
 Copyright (C) 2014 Tomas Bzatek <tbzatek@redhat.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General
 Public License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA 02111-1307, USA.
-->

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Manager.LVM2:
      @short_description: LVM2 add-on to the manager singleton
      @since: 2.0.0

      Additional interface with LVM2 specifics for top-level manager singleton object
      located at the object path <literal>/org/freedesktop/UDisks2/Manager</literal>.
  -->
  <interface name="org.freedesktop.UDisks2.Manager.LVM2">
    <!-- prereq: org.freedesktop.UDisks2.Manager -->

    <!--
        VolumeGroupCreate:
        @name: The name for the volume group.
        @blocks: The block devices to use as physical volumes, as UDisks2 object paths.
        @options: Additional options.
        @result: The object path of the new volume group object.
        @since: 2.0.0

        Creates a new volume group, using @blocks as the initial
        physical volumes.  Each block device will be wiped and all
        data on them will be lost.

        You must specify at least one block device to be used as a
        physical volume.

        No additional options are currently defined.
    -->
    <method name="VolumeGroupCreate">
      <arg name="name" direction="in" type="s"/>
      <arg name="blocks" direction="in" type="ao"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="result" direction="out" type="o"/>
    </method>

  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Block.LVM2:
      @short_description: LVM2 add-on to the block device
      @since: 2.0.0

      Additional interface with LVM2 specifics for a block device.
  -->
  <interface name="org.freedesktop.UDisks2.Block.LVM2">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!-- LogicalVolume:
         @since: 2.0.0
         If the block device is a logical volume in a volume group,
         this is set to the #org.freedesktop.UDisks2.LogicalVolume
         object that it corresponds to.  It is '/' otherwise.
      -->
    <property name="LogicalVolume" type="o" access="read"/>

  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.PhysicalVolume:
      @short_description: Block device that is a physical volume
      @since: 2.0.0

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that are physical volumes in a volume group.
  -->
  <interface name="org.freedesktop.UDisks2.PhysicalVolume">
    <!-- prereq: org.freedesktop.UDisks2.Block -->
    <property name="VolumeGroup" type="o" access="read"/>
    <property name="Size" type="t" access="read"/>
    <property name="FreeSize" type="t" access="read"/>
  </interface>

  <!-- ********************************************************************** -->
  <!--
      org.freedesktop.UDisks2.VolumeGroup:
      @short_description: A volume group
      @since: 2.0.0

      Objects implementing this interface represent LVM2 volume
      groups.  They appear under /org/freedesktop/UDisks2/lvm/.

      The logical volume objects of a volume group are the children of
      the volume group objects in the D-Bus object hierarchy.  See the
      #org.freedesktop.UDisks2.LogicalVolume interface.

      The physical volume objects of a volume group can be found by
      looking for block devices with a
      #org.freedesktop.UDisks2.PhysicalVolume.VolumeGroup property
      that points to the volume group object.
    -->
  <interface name="org.freedesktop.UDisks2.VolumeGroup">
    <!-- Name:

         The name of this volume group, as known to LVM2.
    -->
    <property name="Name" type="s" access="read"/>

    <!-- UUID:

         The UUID this volume group.  It is guaranteed to be unique,
         but it might change over time.
    -->
    <property name="UUID" type="s" access="read"/>

    <!-- Size:

         The total capacity of this volume group, in bytes.
    -->
    <property name="Size" type="t" access="read"/>

    <!-- FreeSize:

         The unused capacity of this volume group, in bytes.
    -->
    <property name="FreeSize" type="t" access="read"/>

    <!-- ExtentSize:

         The size of extents.  When creating and resizing logical
         volumes, sizes are rounded up to multiples of the extent
         size.
    -->
    <property name="ExtentSize" type="t" access="read"/>

    <!-- NeedsPolling:

         Whether or not this volume group needs to be periodically
         polled to guarantee updates.
    -->
    <property name="NeedsPolling" type="b" access="read"/>

    <!-- Poll:

         Make sure that all properties of this volume group and of all
         their logical and physical volumes are up-to-date.

         The properties are not guaranteed to be up-to-date yet when
         this method returns.
    -->
    <method name="Poll">
    </method>

    <!-- Delete:
         @wipe: Whether to wipe the volume group.
         @options: Additional options.

         Delete this volume group.  All its logical volumes will be
         deleted, too.

         If the option <parameter>tear-down</parameter> is set to
         %TRUE, then all logical volumes will be cleaned up before
         deletion.  This cleanup consists of removing entries from
         /etc/fstab and /etc/crypttab, and locking of encrypted block
         devices.  Entries in /etc/fstab and /etc/crypttab that have
         been created with the 'track-parents' options to
         AddConfigurationItem will be removed even if their block
         device is currently unavailable.
    -->
    <method name="Delete">
      <arg name="wipe" type="b" direction="in"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- Rename:
         @new_name: The new name.
         @options: Additional options.
         @result: The new object path.

         Rename this volume group.  This might cause the volume group
         object to disappear from D-Bus and reappear with a different
         path.

         No additional options are currently defined.
    -->
    <method name="Rename">
      <arg name="new_name" type="s" direction="in"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="result" type="o" direction="out"/>
    </method>

    <!-- AddDevice:
         @block: The block device to add, as a UDisks2 object path.
         @options: Additional options.

         Add a new physical volume to the volume group.  The block
         device will be wiped and all data on it will be lost.
    -->
    <method name="AddDevice">
      <arg name="block" type="o" direction="in"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- EmptyDevice:
         @block: The block device to empty, as a UDisks2 object path.
         @options: Additional options.

         Move all data on the given block device somewhere else so
         that the block device might be removed.

         No additional options are currently defined.
    -->
    <method name="EmptyDevice">
      <arg name="block" type="o" direction="in"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- RemoveDevice:
         @block: The block device to remove, as a UDisks2 object path.
         @wipe: Whether to wipe the physical volume.
         @options: Additional options.

         Remove the indicated physical volume from the volume group.
         The physical device must be unused.

         No additional options are currently defined.
    -->
    <method name="RemoveDevice">
      <arg name="block" type="o" direction="in"/>
      <arg name="wipe" type="b" direction="in"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- CreatePlainVolume:
         @name: The name of the new logical volume.
         @size: The size.
         @options: Additional options.
         @result: The object path of the new logical volume.

         Create a 'normal' new logical volume.

         No additional options are currently defined.
    -->
    <method name="CreatePlainVolume">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="result" type="o" direction="out"/>
    </method>

    <!-- CreateThinPoolVolume:
         @name: The name of the new logical volume.
         @size: The total size.
         @options: Additional options.
         @result: The object path of the new logical volume.

         Create a new logical volume that can be used to back
         thinly-provisioned logical volumes.  The @size parameter is
         the total amount of space taken out of the volume group.
         That space will be used for data and metadata.  The actual
         amount of data that can be stored in the pool will be
         slightly smaller.

         No additional options are currently defined.
    -->
    <method name="CreateThinPoolVolume">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="result" type="o" direction="out"/>
    </method>

    <!-- CreateThinVolume:
         @name: The name of the new logical volume.
         @size: The virtual size.
         @pool: The thin pool to use.
         @options: Additional options.
         @result: The object path of the new logical volume.

         Create a new thinly provisioned logical volume in the given
         pool.

         No additional options are currently defined.
    -->
    <method name="CreateThinVolume">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
      <arg name="pool" type="o" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="result" type="o" direction="out"/>
    </method>

     <!-- CreateVDOVolume:
         @lv_name: The name of the to-be-created VDO LV.
         @pool_name: The name of the to-be-created VDO pool LV.
         @data_size: The size of the data VDO LV (physical size of the @pool_name VDO pool LV).
         @virtual_size: The virtual_size of the @lv_name VDO LV or 0 for default (@data_size minus metadata).
         @index_memory: Amount of index memory in bytes or 0 for default.
         @compression: Enables or disables compression when creating the VDO volume.
         @deduplication: Enables or disables deduplication when creating the VDO volume.
         @write_policy: Specifies the write policy.
         @options: Additional options.
         @result: The object path of the new VDO logical volume.

         @since: 2.9.0

         Create a new VDO logical volume that is backed by a newly created
         VDO pool. The VDO data logical volume and VDO pool logical volume
         are created together, VDO pool supports only a single VDO LV.
         The @data_size parameter is the total amount of space
         taken out of the volume group and it's the size of the @pool_name
         VDO pool logical volume.
         The @virtual_size is the size of the @lv_name VDO logical volume
         and represents expected amount of the data that can be stored
         after deduplication and compression.

         No additional options are currently defined.

         Known @write_policy values include:
         <variablelist>
           <varlistentry><term>sync</term><listitem><para>Writes are acknowledged only after data is on stable storage. 'sync' policy is not supported if the underlying storage is not also synchronous.</para></listitem></varlistentry>
           <varlistentry><term>async</term><listitem><para>Writes are acknowledged when data has been cached for writing to stable storage; data which has not been flushed is not guaranteed to persist in this mode.</para></listitem></varlistentry>
           <varlistentry><term>auto</term><listitem><para>VDO will check the storage device and determine whether it supports flushes. If it does, VDO will run in async mode, otherwise it will run in sync mode.</para></listitem></varlistentry>
         </variablelist>
    -->
    <method name="CreateVDOVolume">
      <arg name="lv_name" type="s" direction="in"/>
      <arg name="pool_name" type="s" direction="in"/>
      <arg name="data_size" type="t" direction="in"/>
      <arg name="virtual_size" type="t" direction="in"/>
      <arg name="index_memory" type="t" direction="in" />
      <arg name="compression" type="b" direction="in" />
      <arg name="deduplication" type="b" direction="in" />
      <arg name="write_policy" type="s" direction="in" />
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="result" type="o" direction="out"/>
      <annotation name="org.gtk.GDBus.C.Name" value="Create_VDO_Volume"/>
    </method>

  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.LogicalVolume:
      @short_description: A logical volume
      @since: 2.0.0

      Objects with this interface represent logical volumes in a
      volume group.  Active logical volumes are associated with a
      block device, which link back to the logical volume object via
      their #org.freedesktop.UDisks2.Block.LVM2:LogicalVolume property.

      Logical volume objects are children of their volume group
      object, and also link to it via the #VolumeGroup property.
  -->
  <interface name="org.freedesktop.UDisks2.LogicalVolume">

    <!-- VolumeGroup:

         The path of the volume group object that this logical volume
         belongs to.
    -->
    <property name="VolumeGroup" type="o" access="read"/>

    <!-- Name:

         The name of this logical volume, as it is known to LVM2.
    -->
    <property name="Name" type="s" access="read"/>

    <!-- Active:

         Whether or not this volume is active.
    -->
    <property name="Active" type="b" access="read"/>

    <!-- UUID:

         The UUID of this logical volume.  It is guaranteed to be
         unique within the group, but it might change over time.
    -->
    <property name="UUID" type="s" access="read"/>

    <!-- Size:

         The total size of this logical volume in bytes, including the
         size of the metadata.
    -->
    <property name="Size" type="t" access="read"/>

    <!-- DataAllocatedRatio:

         For a thin pool or a non-thin snapshot, indicates how full
         the area for storing data is.  A value of 1.0 corresponds to
         100%.
    -->
    <property name="DataAllocatedRatio" type="d" access="read"/>

    <!-- MetadataAllocatedRatio:

         For a thin pool or a non-thin snapshot, indicates how full
         the area for storing meta data is.  A value of 1.0
         corresponds to 100%.
    -->
    <property name="MetadataAllocatedRatio" type="d" access="read"/>

    <!-- Type:

         The general type of a logical volume. One of "block" or
         "pool". More types might be defined in the future.

         A volume of type "block" can be used as a block device. A
         volume of type "pool" can be used to create thin volumes.
    -->
    <property name="Type" type="s" access="read"/>

    <!-- ThinPool:

         For a thin volume, the object path of its pool.
    -->
    <property name="ThinPool" type="o" access="read"/>

    <!-- Origin:

         For a snapshot, the object path of its origin.
    -->
    <property name="Origin" type="o" access="read"/>

    <!-- ChildConfiguration: Configuration items belonging to the
         block device of this logical volume and its children.  This
         is also valid when this logical volume is not currently
         active and there is no block device for it.  It works via the
         'track-parents' options of
         org.freedesktop.UDisks2.Block.AddConfigurationItem(), which
         see.
    -->
    <property name="ChildConfiguration" type="a(sa{sv})" access="read"/>

    <!-- BlockDevice:
         @since: 2.7.1

         For an active LV, the object path of its block device.
    -->
    <property name="BlockDevice" type="o" access="read"/>

    <!-- Activate:
         @options: Additional options.
         @result: The UDisks2 object path of the block device.

         Activate this logical volume, which makes it appear as a
         block device in the system.

         Non-thin snapshots are always activated and deactivated
         together with their origins.

         No additional options are currently defined.
    -->
    <method name="Activate">
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="result" type="o" direction="out"/>
    </method>

    <!-- Deactivate:
         @options: Additional options.

         Deactivate this logical volume, which makes its block device
         disappear.

         Non-thin snapshots are always activated and deactivated
         together with their origins.

         No additional options are currently defined.
    -->
    <method name="Deactivate">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- Delete:
         @options: Additional options.

         Delete this logical volume.

         If there are any non-thin snapshots of this logical volume,
         they will be deleted as well.

         If this is a thin pool, all its contained thin volumes will
         be deleted as well.

         If the option <parameter>tear-down</parameter> is set to
         %TRUE, then the logical volume and all its children will be
         cleaned up before deletion.  This cleanup consists of
         removing entries from /etc/fstab and /etc/crypttab, and
         locking of encrypted block devices.  Entries in /etc/fstab
         and /etc/crypttab that have been created with the
         'track-parents' options to AddConfigurationItem will be
         removed even if their block device is currently unavailable.
    -->
    <method name="Delete">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- Rename:
         @new_name: The new name.
         @options: Additional options.
         @result: The new object path.

         Rename this logical volume.  This might cause the logical
         volume object to disappear from D-Bus and reappear with a
         different path.

         No additional options are currently defined.
    -->
    <method name="Rename">
      <arg name="new_name" type="s" direction="in"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="result" type="o" direction="out"/>
    </method>

    <!-- Resize:
         @new_size: The new size, in bytes.
         @options: Additional options.

         Resize this logical volume.

         Additional options:

         resize_fsys (b):  Whether to resize the filesystem on the
                           logical volume as well. Default to 'false'.

         force (b):        Whether to force the resize even if it might
                           destroy data.
    -->
    <method name="Resize">
      <arg name="new_size" type="t" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
    </method>

    <!-- CreateSnapshot:
         @name: The name of the snapshot.
         @size: The size of the backing store for the snapshot, in bytes.
         @options: Additional options.

         Create a snapshot of this logical volume.

         When creating a snapshot of a non-thin volume, a non-zero
         size must be specified.  A non-thin snapshot is created in
         this case.

         When creating a snapshot of a thin volume, specifying a @size
         of zero will create a thin snapshot in the same pool.

         When creating a snapshot of a thin volume, specifying a
         non-zero @size will create a non-thin snapshot.

         No additional options are currently defined.
    -->
    <method name="CreateSnapshot">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="result" type="o" direction="out"/>
    </method>

    <!-- CacheAttach:
         @cache_name: The name of an existing volume.
         @options: Additional options.
         @since: 2.3.0

         Creates cache LV. Logical volume which name is provided, will be formated, converted to cache type
         and attached to origin logical volume as a cache pool LV. Logical volumes must be in the same volume group.

         No additional options are currently defined.
    -->
    <method name="CacheAttach">
      <arg name="cache_name" type="s" direction="in"/>
      <arg name="options" type= "a{sv}" direction="in"/>
    </method>

    <!-- CacheSplit:
         @options: Additional options.
         @since: 2.3.0

         Splits Cache LV to Cache pool LV and Origin LV, not afeecting its content.

         No additional options are currently defined.
    -->
    <method name="CacheSplit">
      <arg name="options" type= "a{sv}" direction="in"/>
    </method>

    <!-- CacheDetach:
         @options: Additional options.
         @since: 2.6.3

         Detaches the cached LV from its cache.

         No additional options are currently defined.
    -->
    <method name="CacheDetach">
        <arg name="options" type= "a{sv}" direction="in"/>
    </method>

  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.VDOVolume:
      @short_description: A VDO logical volume
      @since: 2.9.0

      Objects with this interface represent VDO logical volumes in a
      volume group.

      VDO logical volume objects are children of their VDO pool
      object, and also link to it via the #VDOPool property.
  -->
  <interface name="org.freedesktop.UDisks2.VDOVolume">
     <annotation name="org.gtk.GDBus.C.Name" value="VDO_Volume"/>

     <!-- VDOPool:

         Object path of the VDO pool for this volume.
    -->

    <property name="VDOPool" type="o" access="read">
        <annotation name="org.gtk.GDBus.C.Name" value="VDO_Pool"/>
    </property>

    <!-- OperatingMode:

         Operating mode of the VDO volume.

         One of "normal", "read-only" or "recovering".
    -->
    <property name="OperatingMode" type="s" access="read"/>

    <!-- CompressionState:

         Compression state of the VDO volume.

         One of "online" or "offline".
    -->
    <property name="CompressionState" type="s" access="read"/>

    <!-- IndexState:

         State of the VDO index of the volume.

         One of "online", "offline", "opening", "closing", "closed"
         or "error".
    -->
    <property name="IndexState" type="s" access="read"/>

    <!-- UsedSize:

         The total physical size used by this VDO volume.
    -->
    <property name="UsedSize" type="t" access="read"/>

    <!-- Compression:

         Indicates whether compression is enabled.
    -->
    <property name="Compression" type="b" access="read" />

    <!-- Deduplication:

         Indicates whether deduplication is enabled.
    -->
    <property name="Deduplication" type="b" access="read" />

    <!--
        EnableCompression:
        @enable: A boolean value indicating whether compression should be enabled.
        @options: Additional options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Enables or disables compression on the VDO volume. If the VDO volume
        is running, takes effect immediately.
    -->
    <method name="EnableCompression">
      <arg name="enable" direction="in" type="b" />
      <arg name="options" direction="in" type="a{sv}" />
    </method>

    <!--
        EnableDeduplication:
        @enable: A boolean value indicating whether deduplication should be enabled.
        @options: Additional options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Enables or disables deduplication on the VDO volume. If the VDO volume
        is running, takes effect immediately.
    -->
    <method name="EnableDeduplication">
      <arg name="enable" direction="in" type="b" />
      <arg name="options" direction="in" type="a{sv}" />
    </method>

  </interface>

  <!-- ********************************************************************** -->

</node>
